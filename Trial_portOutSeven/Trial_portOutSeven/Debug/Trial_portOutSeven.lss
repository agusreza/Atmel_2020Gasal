
Trial_portOutSeven.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000104  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000158  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000188  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000075b  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006b8  00000000  00000000  0000094b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ef  00000000  00000000  00001003  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000012f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003c6  00000000  00000000  00001328  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001b2  00000000  00000000  000016ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000018a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   8:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  10:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  14:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  18:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  1c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  20:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  24:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  28:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  2c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  30:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  34:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  38:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  3c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  40:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  44:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  48:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  4c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  50:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  54:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  58:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  5c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  60:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  64:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  68:	53 00       	.word	0x0053	; ????
  6a:	55 00       	.word	0x0055	; ????
  6c:	57 00       	.word	0x0057	; ????
  6e:	59 00       	.word	0x0059	; ????
  70:	5b 00       	.word	0x005b	; ????
  72:	5d 00       	.word	0x005d	; ????
  74:	5f 00       	.word	0x005f	; ????
  76:	61 00       	.word	0x0061	; ????
  78:	53 00       	.word	0x0053	; ????
  7a:	63 00       	.word	0x0063	; ????

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61
  88:	0e 94 68 00 	call	0xd0	; 0xd0 <main>
  8c:	0c 94 80 00 	jmp	0x100	; 0x100 <_exit>

00000090 <__bad_interrupt>:
  90:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000094 <kirimkeDisplay>:
{
	uint8_t	dataSevenOut;		//local variable
	
	dataSevenOut = 0x00;
	
	switch (angka)
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	8a 30       	cpi	r24, 0x0A	; 10
  98:	91 05       	cpc	r25, r1
  9a:	b8 f4       	brcc	.+46     	; 0xca <kirimkeDisplay+0x36>
  9c:	fc 01       	movw	r30, r24
  9e:	ec 5c       	subi	r30, 0xCC	; 204
  a0:	ff 4f       	sbci	r31, 0xFF	; 255
  a2:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__tablejump2__>
	{
	case 0: dataSevenOut = 0b00111111;
  a6:	8f e3       	ldi	r24, 0x3F	; 63
  a8:	11 c0       	rjmp	.+34     	; 0xcc <kirimkeDisplay+0x38>
		break;
	case 1: dataSevenOut = 0b00000110;
  aa:	86 e0       	ldi	r24, 0x06	; 6
		break;
  ac:	0f c0       	rjmp	.+30     	; 0xcc <kirimkeDisplay+0x38>
	case 2: dataSevenOut = 0b01011011;
  ae:	8b e5       	ldi	r24, 0x5B	; 91
		break;
  b0:	0d c0       	rjmp	.+26     	; 0xcc <kirimkeDisplay+0x38>
	case 3: dataSevenOut = 0b01001111;
  b2:	8f e4       	ldi	r24, 0x4F	; 79
		break;
  b4:	0b c0       	rjmp	.+22     	; 0xcc <kirimkeDisplay+0x38>
	case 4: dataSevenOut = 0b01100110;
  b6:	86 e6       	ldi	r24, 0x66	; 102
		break;
  b8:	09 c0       	rjmp	.+18     	; 0xcc <kirimkeDisplay+0x38>
	case 5: dataSevenOut = 0b01101101;
  ba:	8d e6       	ldi	r24, 0x6D	; 109
		break;
  bc:	07 c0       	rjmp	.+14     	; 0xcc <kirimkeDisplay+0x38>
	case 6: dataSevenOut = 0b01111101;
  be:	8d e7       	ldi	r24, 0x7D	; 125
		break;
  c0:	05 c0       	rjmp	.+10     	; 0xcc <kirimkeDisplay+0x38>
	case 7: dataSevenOut = 0b00000111;
  c2:	87 e0       	ldi	r24, 0x07	; 7
		break;
  c4:	03 c0       	rjmp	.+6      	; 0xcc <kirimkeDisplay+0x38>
	case 8: dataSevenOut = 0b00111111;
		break;
	case 9: dataSevenOut = 0b11101111;
  c6:	8f ee       	ldi	r24, 0xEF	; 239
		break;
  c8:	01 c0       	rjmp	.+2      	; 0xcc <kirimkeDisplay+0x38>

void kirimkeDisplay (uint8_t angka)
{
	uint8_t	dataSevenOut;		//local variable
	
	dataSevenOut = 0x00;
  ca:	80 e0       	ldi	r24, 0x00	; 0
		break;
	default: 
		break;
	}
	
	PORTD = dataSevenOut;
  cc:	8b b9       	out	0x0b, r24	; 11
  ce:	08 95       	ret

000000d0 <main>:

int main(void)
{
	uint8_t counter;
    
	DDRD = 0xFF;
  d0:	8f ef       	ldi	r24, 0xFF	; 255
  d2:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0xff;
  d4:	8b b9       	out	0x0b, r24	; 11

	counter = 0;
  d6:	c0 e0       	ldi	r28, 0x00	; 0
		
    while (1) 
    {
		kirimkeDisplay(counter);
  d8:	8c 2f       	mov	r24, r28
  da:	0e 94 4a 00 	call	0x94	; 0x94 <kirimkeDisplay>
		counter++;
  de:	cf 5f       	subi	r28, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e0:	2f ef       	ldi	r18, 0xFF	; 255
  e2:	83 ed       	ldi	r24, 0xD3	; 211
  e4:	90 e3       	ldi	r25, 0x30	; 48
  e6:	21 50       	subi	r18, 0x01	; 1
  e8:	80 40       	sbci	r24, 0x00	; 0
  ea:	90 40       	sbci	r25, 0x00	; 0
  ec:	e1 f7       	brne	.-8      	; 0xe6 <main+0x16>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <main+0x20>
  f0:	00 00       	nop
  f2:	f2 cf       	rjmp	.-28     	; 0xd8 <main+0x8>

000000f4 <__tablejump2__>:
  f4:	ee 0f       	add	r30, r30
  f6:	ff 1f       	adc	r31, r31
  f8:	05 90       	lpm	r0, Z+
  fa:	f4 91       	lpm	r31, Z
  fc:	e0 2d       	mov	r30, r0
  fe:	09 94       	ijmp

00000100 <_exit>:
 100:	f8 94       	cli

00000102 <__stop_program>:
 102:	ff cf       	rjmp	.-2      	; 0x102 <__stop_program>
